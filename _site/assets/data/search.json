[
  
  {
    "title"    : "자바 ORM 표준 JPA 프로그래밍 - (1) JPA 소개",
    "category" : "Book",
    "url"      : "/book/2022/02/03/jpa-1/",
    "date"     : "February 3, 2022",
    "excerpt"  : "\n  “왜 실무에서 테이블 설계는 다들 열심히 하면서 제대로 된 객체 모델링은 하지 않을까?”\n\n\n\n  “왜 객체 지향의 장점을 포기하고 객체를 단순히 테이블에 맞추어 데이터 전달 역할만 하도록 개발할까?”\n\n\n1. SQL 을 직접 다룰 때 발생하는 문제점\n\n\n  진정한 의미의 계층 분할이 어렵다.\n  엔티티를 신뢰할 수 없다.\n  SQL에 의존적인 개발을 피하기 어렵다.\n\n\n2. 패러다임의 불일치\n\n\n  관계형 데이터베이스는 데이터 중심...",
    "content"  : "\n  “왜 실무에서 테이블 설계는 다들 열심히 하면서 제대로 된 객체 모델링은 하지 않을까?”\n\n\n\n  “왜 객체 지향의 장점을 포기하고 객체를 단순히 테이블에 맞추어 데이터 전달 역할만 하도록 개발할까?”\n\n\n1. SQL 을 직접 다룰 때 발생하는 문제점\n\n\n  진정한 의미의 계층 분할이 어렵다.\n  엔티티를 신뢰할 수 없다.\n  SQL에 의존적인 개발을 피하기 어렵다.\n\n\n2. 패러다임의 불일치\n\n\n  관계형 데이터베이스는 데이터 중심으로 구조화되어 있고, 집합적인 사고를 요구한다. 객체지향에서 이야기하는 추상화, 상속, 다형성 같은 개념이 없다.\n  따라서 객체 구조를 테이블 구조에 저장하는 데는 한계가 있다.\n  문제는 객체와 관계형 데이터베이스 사이의 패러다임 불일치 문제를 해결하는데 너무 많은 시간과 코드를 소비하는데 있다.\n  \n    결국, 객체 모델링은 힘을 잃고 점점 데이터 중심의 모델로 변해간다.\n\n    ▪️ 연관관계\n\n    \n      객체는 참조를 사용해서 다른 객체와 연과관계를 가지고 참조에 접근해서 연관된 객체를 조회한다. 반면에 테이블은 외래 키를 사용해서 다른 테이블과 연관관계를 가지고 조인을 사용해서 연관된 테이블을 조회한다.\n      객체를 테이블에 맞추어 모델링하면 객체를 테이블에 저장하거나 조회할 때는 편리하다.\n      하지만 객체는 연관된 객체의 참조를 통해 연관된 객체를 찾을 수 있다.\n      객체 모델은 외래키가 필요 없고, 참조만 있으면 된다.\n      반면에 테이블은 참조가 필요 없고 외래키만 있으면 된다.\n      JPA는 연관관계와 관련된 패러다임의 불일치 문제를 해결해준다.\n    \n\n    ▪️ 객체 그래프 탐색\n\n    \n      객체에서 참조를 사용해서 연관된 팀을 찾는 것을 객체 그래프 탐색이라고 한다.\nmember.getOrder().getOrderItem()...\n      SQL을 직접 다루면 처음 실행하는 SQL에 따라 객체 그래프를 어디까지 탐색할 수 있는지 정해진다.\n      결국 조회하는 메소드를 상황에 따라 여러 벌 만들어서 사용해야 한다.\n      JPA는 연관된 객체를 사용하는 시점에 적절한 SELECT SQL을 실행한다. 따라서 JPA를 사용하면 연관된 객체를 신뢰하고 마음껏 조회할 수 있다. 이 기능은 실제 객체를 사용하는 시점까지 데이터베이스 조회를 미룬다고 해서 지연 로딩이라 한다.\n    \n\n    ▪️ 비교\n\n    \n      \n        데이터베이서는 기본 키의 값으로 각 로우를 구분한다. 반면에 객체는 동일성(identity) 비교와 동등성(equality) 비교라는 두 가지 비교 방법이 있다.\n\n        따라서 테이블의 로우를 구분하는 방법과 객체를 구분하는 방법에는 차이가 있다.\n\n        String memberUd = &quot;100&quot;;\nMember member1 = memberDAO.getMember(memberId);\nMember member2 = memberDAO.getMember(memberId);\n    \nmember1 == member2 //다르다\n        \n      \n      위의 코드에서 기본 키 값이 같은 회원 객체를 두 번 조회했다. 그런데 둘을 동일성(==) 비교 하면 false가 반환된다. 왜냐하면 member1과 member2는 같은 데이터베이스 로우에서 조회했지만, 객체 측면에서 볼 때 둘은 서로 다른 인스턴스이기 때문이다.\n      JPA는 같은 트랜잭션일 때 같은 객체가 조회되는 것을 보장한다.\n    \n  \n\n\n3. JPA란 무엇일까?\n\n\n  JPA(Java Persistence API)는 자바 진영의 ORM 기술 표준이다.\n  ORM(Object-Relational Mapping)은 객체와 관계형 데이터베이스를 매핑한다는 뜻이다.\n  ORM 프레임워크는 객체와 테이블을 매핑해서 패러다임의 불일치 문제를 개발자 대신 해결해준다.\n  자바 진영에도 다양한 ORM 프레임워크들이 있는데 그중에 하이버네이트 프레임워크가 가장 많이 사용된다. 하이버네이트는 거의 대부분의 패러다임 불일치 문제를 해결해주는 성숙한 ORM 프레임워크이다.\n\n\n\n\n\n  JPA는 자바 ORM 기술에 대한 QPI 표준 명세다. 따라서 JPA를 사용하려면 JPA를 구현한 ORM 프레임워크를 선택해야 한다.\n  왜 JPA를 사용해야 하는가?\n    \n      유지보수\n      패러다임 불일치 해결\n      성능\n      데이터 접근 추상화와 벤터 독립성\n      표준\n    \n  \n\n\n\n"
} ,
  
  {
    "title"    : "Macbook 에서 Java 설치하기",
    "category" : "Daily",
    "url"      : "/daily/2022/02/02/macbook-java/",
    "date"     : "February 2, 2022",
    "excerpt"  : "그동안 Window만 사용하다가 이번에 처음으로 Macbook으로 바꾸게 되었습니다.\n개발을 하면서 Linux, Ubuntu 도 간간이 사용하였지만, 주로 사용한 건 Window였기 때문에 macOS를 잘 다룰 수 있을지 걱정도 되었습니다. \n처음 개발을 배우던 시기에는 개발 환경을 세팅하는 것이 어렵게 느껴졌는데, 그래도 이제는 새로운 환경에 제법 잘 적응할 수 있게 된 것 같습니다. \nmacOS 관련해서는 더 공부가 필요하지만, 일단 ...",
    "content"  : "그동안 Window만 사용하다가 이번에 처음으로 Macbook으로 바꾸게 되었습니다.\n개발을 하면서 Linux, Ubuntu 도 간간이 사용하였지만, 주로 사용한 건 Window였기 때문에 macOS를 잘 다룰 수 있을지 걱정도 되었습니다. \n처음 개발을 배우던 시기에는 개발 환경을 세팅하는 것이 어렵게 느껴졌는데, 그래도 이제는 새로운 환경에 제법 잘 적응할 수 있게 된 것 같습니다. \nmacOS 관련해서는 더 공부가 필요하지만, 일단 필요한 개발 환경을 구축하면서 내용을 정리해 보았습니다.\n\nJava 설치 경로 및 버전 확인\n\n  기존에 설치된 Java 검색\n    brew search jdk\nbrew tap adoptopenjdk/openjdk\n    \n  \n  AdoptOpenJDK 설치\n    brew install --cask adoptopenjdk8\nbrew install --cask adoptopenjdk11\n    \n  \n  \n    Rosetta 2를 설치해야 하는 경우\nRosetta 2는 Intel 프로세서가 장착된 Mac용으로 제작된 앱을 Apple Silicon이 장착된 Mac에서 사용할 수 있게 해주는 에뮬레이터이다. 아래와 같은 메시지가 나오면 ‘설치’를 클릭한 다음 사용자 이름과 암호를 입력하여 설치를 진행한다.\n\n  \n  설치된 Java 검색\n    /usr/libexec/java_home -V\njava --version\n    \n  \n\n\nJava 버전 바꾸기\n자바 버전을 바꾸는 방법중에는 jEnv를 활용하는 방법과 환경변수를 지정하는 방법이 있다.\n여기서는 환경 변수를 변경하는 방법으로 작성되었다.\n\n\n  \n    환경 설정 값과 경로들을 저장하는 파일을 찾는다.\nbash쉘을 사용하는 경우는 ~/.bash_profile이고 zsh쉘을 사용하는 경우 ~/.zshrc 파일을 수정한다.\n\n      echo $SHELL    # 어떤 쉘을 사용하는지 확인\n  vi ~/.zshrc\n    \n\n      # Java Paths\n  export JAVA_HOME_11=$(/usr/libexec/java_home -v11.0.11)\n  export JAVA_HOME_8=$(/usr/libexec/java_home -v1.8.0_292)\n    \n  # Java 11\n  export JAVA_HOME=$JAVA_HOME_11\n    \n  # Java 8\n  # export JAVA_HOME=$JAVA_HOME_8\n    \n  \n\n\n\n  Reference\n  Mac에 Rosetta를 설치해야 하는 경우\n  homebrew로 openjdk 설치하기\n  맥에서 Brew로 자바 설치하기(feat. 자바버전 바꾸기)\n  java_home and JAVA_HOME on macOS\n\n"
} ,
  
  {
    "title"    : "MacBook Setting",
    "category" : "Daily",
    "url"      : "/daily/2022/02/01/macbook/",
    "date"     : "February 1, 2022",
    "excerpt"  : "\n  homebrew 란 macOS 용 패키지 관리 애플리케이션입니다. homebrew는 주로 커맨드라인 도구나 시스템 패키지들을 설치하는 데 사용합니다. \n기본적으로 맥OS용 패키지 관리자이지만, 리눅스나 윈도우의 WSL도 지원하고 있습니다. homebrew는 편리하게 사용할 수 있다는 장점이 있습니다만, 커뮤니티 기반으로 운영되기 때문에 패키지의 안정성이 보장되지 않는다는 단점이 있습니다. 일부 리눅스 배포판의 경우 패키지 버전 정책이...",
    "content"  : "\n  homebrew 란 macOS 용 패키지 관리 애플리케이션입니다. homebrew는 주로 커맨드라인 도구나 시스템 패키지들을 설치하는 데 사용합니다. \n기본적으로 맥OS용 패키지 관리자이지만, 리눅스나 윈도우의 WSL도 지원하고 있습니다. homebrew는 편리하게 사용할 수 있다는 장점이 있습니다만, 커뮤니티 기반으로 운영되기 때문에 패키지의 안정성이 보장되지 않는다는 단점이 있습니다. 일부 리눅스 배포판의 경우 패키지 버전 정책이 매우 보수적이지만, homebrew로 패키지를 설치하는 경우 거의 항상 최신 버전이 설치됩니다. 구버전의 패키지를 설치하는 것도 가능하지만 번거로운 편입니다.\n  cask 확장을 통해 웹 사이트에서 다운받을 수 있는 애플리케이션을 설치할 수 있습니다.\n  mas 확장을 통해 앱 스토어에서 다운받을 수 애플리케이션 설치할 수 있습니다.\n\n\n1. 맥북 프로그램 설치\n\n1) homebrew 설치\n\n  Homebrew란? 설치 방법과 사용 방법\n  홈페이지에서 명령줄을 복사하여 터미널에서 실행\n\n\n /bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&quot;\n\n→ password 입력 후, Enter 로 확인\n\n\n  설치가 완료되면 환경 변수 추가 메시지 로그를 확인\n  M1 용 Homebrew 설치\n\n\n⇒ Next steps: - Add Homebrew to your PATH in [path]/.zprofile:\n\necho &#39;eval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;&#39; &amp;gt;&amp;gt; [path]/.zprofile\neval &quot;$(/opt/homebrew/bin/brew shellenv)&quot;\n\n\n2) brew cask 설치\nbrew install cask \n\n\n3) brew mas 설치\nbrew install mas \n\n\n2. homebrew 설치 기본 명령\n\n1) brew 명령어\nbrew list\nbrew search [패키지명]\nbrew info [패키지명]\nbrew install [패키지명]\nbrew uninstall [패키지명]\n\n\n2) cask 명령어\nbrew list --cask\nbrew search --cask [앱이름]\nbrew info --cask [앱이름]\nbrew install --cask [앱이름]\nbrew uninstall --cask [앱이름]\n\n\n3) mas 명령어\nmas list\nmas search [앱이름]\nmas info [앱번호]\nbrew install mas [앱번호]\nbrew uninstall mas [앱번호]\n\n\n참고\n\n설치할 목록\n\n    \n      brew\n        \n          java\n          git\n          gradle\n          jq : 커맨드라인 JSON 프로세서\n          tree : tree 명령어\n        \n      \n      cask\n        \n          chrome\n          slack\n          docker\n          source tree\n          intellij-idea\n          vscode\n          iterm2\n          Spectacle : 화면 분할\n          Karabiner-Elements : 한/영키\n          Alfred : 검색\n          kap : 화면 기록\n        \n      \n      mas\n        \n          OneDrive\n          Excel\n          Word\n          Power point\n          Todo\n          kakaotalk\n          Joli of Caffeine : 절전 모드 시간 설정\n        \n      \n    \n  \n\n\n\nBundle 로 설치\n\n    \n      \n        brew file 생성 및 실행\n\n        cd ~\n  \n# 생성\nbrew bundle dump\n  \n# 덮어 씌우기\nbrew bundle -f dump\n  \n# 파일 확인\ncat BrewFile\n  \n# 실행\nbrew bundle\n        \n      \n    \n\n  \n\n\n\n  Reference\n  내가 설치한 맥용 어플리케이션들\n  맥북 추천 무료 앱 8가지 + 크롬 브라우저 익스텐션 1가지\n  Mac - brew(개발 환경 자동화)\n\n"
} ,
  
  {
    "title"    : "프로그래머 성장 과정 대한 정리",
    "category" : "Programming",
    "url"      : "/programming/2022/01/31/growing-up/",
    "date"     : "January 31, 2022",
    "excerpt"  : "어느날, Java를 프로그래밍 주 언어로 사용하지만 Java에 대한 지식이 부족하다는 생각이 들었습니다.\n개발에 필요한 지식만 익히지 말고 이번에는 제대로 기본기를 잡아보자! 하는 결심이 들어서 본격적으로 Java 공부를 다시 시작하게 되었습니다. \nJava 기본기 공부를 하기 위해 『Java의 정석』 책과 인프런의 『만들어 가면서 배우는 JAVA 플레이그라운드』 강의를 먼저 학습하기로 했습니다. \n막상 강의를 들으려는데, 초반 내용은 개...",
    "content"  : "어느날, Java를 프로그래밍 주 언어로 사용하지만 Java에 대한 지식이 부족하다는 생각이 들었습니다.\n개발에 필요한 지식만 익히지 말고 이번에는 제대로 기본기를 잡아보자! 하는 결심이 들어서 본격적으로 Java 공부를 다시 시작하게 되었습니다. \nJava 기본기 공부를 하기 위해 『Java의 정석』 책과 인프런의 『만들어 가면서 배우는 JAVA 플레이그라운드』 강의를 먼저 학습하기로 했습니다. \n막상 강의를 들으려는데, 초반 내용은 개발환경을 세팅하는 부분이라 ‘그냥 넘어갈까?’하는 마음이 들었습니다. \n그런데 프로그래밍 학습에 대한 어려움과 극복 방법, 연습에 대한 정리 내용이 있어서 듣다가 정말 중요하고 좋은 내용을 전해주셔서 글로 정리하게 되었습다.\n\n프로그래밍 학습이 어려운 이유\n\n\n\n  개발을 하기 시작한 초반에는 숙련도가 낮아도 자심감이 어느정도 있지만, 숙련도가 높아짐에도 어느 시점에서 자신감이 많이 떨어지는 시기가 생긴다.\n  개발을 하기 시작한 초반에는 학습할 내용도 많고, 학습 자원도 매우 많지만 초급에서 중급 단계로 넘어가면서 학습할 자원들 찾기 어렵다고 느낀다.\n  숙련도가 높아지기 위해 학습해야 할 주제의 범위가 점점 많아진다.\n\n\n극복하는 방법\n\n\n\n  Hand-Holding Honeymoon\n    \n      다양한 초보 강의를 검토한 후 하나를 선택해서 학습\n      반복해서 연습하기\n    \n  \n  Cliff of Confusion\n    \n      같이 학습할 동료를 구하기\n      다른 사람의 코드 읽기\n      지속적으로 작은 코드를 시작하고 빌드하면서 디버깅에 대한 두려움을 제거하기 → 성취감 Up, 자신감 Up\n    \n  \n  Desert of Despair\n    \n      하나의 목표를 설정한 후 목표에 집중\n      수박 겉핦기 식의 다양한 지식 습득이 아니라 한 분야에 대한 깊이 있는 지식 습득\n      구체적인 목표 의식을 가지고 의식적인 연습을 함으로써 시간 낭비를 최소화\n    \n  \n  Upswing of Awesome\n    \n      Best practices를 찾아 연습하고, 지식의 빈틈을 보완\n      설계, 아키텍처, 배포와 같이 좋은 개발자가 되기 위한 연습\n      이 단계를 극복하기 위한 핵심은 피드백을 받는 것 → 코칭을 해줄 멘토나 동료를 찾는 것이 중요!\n    \n  \n\n\n프로그래밍 학습에서 취업까지 현실적인 조언\n\n  주변 정리 및 우선순위 조정이 필요하다. 방해받지 않고 프로그래밍에 집중할 수 있어야 한다.\n  프로그래머로 취업하기 위한 학습 기간이 필요하다(최소 1년). 그렇지 않으면 회사 일과 학습을 병행하는 것이 매우 힘들다.\n  개발이 처음이라면 온라인 교육 컨텐츠 보다는 단기 속성 학원을 추천한다. 하지만 학원에서 배운다고 프로그래밍적 사고를 제대로 갖추기는 어렵다. 무엇을 어떻게 학습할 것인지에 대한 감을 잡는 것이 필요하다.\n  같이 학습할 사람을 만드는 것이 가장 중요하다. 매일 일정한 시간, 장소로 출퇴근 하면서 꾸준하게 공부한다.\n  학습하면서 다음 단계로 무엇을 해야할지 모를 때, 포기하고 싶을 때에는 주변 강사님, 선배 개발자에게 조언을 구할 필요가 있다. 또, 가끔씩 회사에 지원해보면서 현재 나의 상태와 부족한 점을 파악하면서 재조정\n해본다.\n\n\n프로그래밍 학습 방식\n\n  기초 지식부터 쌓은 후 무엇인가를 만들어 가는 방식\n  무엇인가를 만들어 가면서 관련된 지식을 학습해 가는 방식\n\n\n자신이 어떤 방식으로 학습할 때 더 효과적으로 학습하는 성향인지 찾아야 한다.\n어떤 방식으로 학습할 때 스트레스를 덜 받고 즐거움을 느끼는지 찾아야 한다.\n\n프로그래밍 연습\n\n  무엇인가 한 가지를 끝낸 후, 바로 다음 단계로 넘어가기 보다는 어색하거나, 이해되지 않거나, 궁금한 내용을 정리하는 시간을 갖자\n  반복해서 연습하자\n  과정 속에서 배운 부분이 있으면 그날 그날 내용을 정리하는 습관을 갖자\n  호기심을 가지고 다양한 시도를 해보자\n\n\n\n   Reference\n   만들어 가면서 배우는 JAVA 플레이그라운드\n   Why Learning to Code is So Damn Hard\n\n\n"
} 
  
]
